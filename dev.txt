＃ようやく離陸したやがて王となるモジュール。
　このモジュールは、小説を書くためのものである。まずやるべきことは、この「dev.html」をコピーして、適当な名前に変えること。
　適当な名前に変える理由は、この名前自身の拡張子を変えたものが、ファイルとなるからである。
　たとえば「dev.html」であれば「dev.txt」としてセーブされる。
　別のもののほうが良い。小説を書くためのものであるので、小説のタイトルなどが適当だろう。
　注意点としては、テキストファイルが生成されるのであるが「***.github.io」限定である。それ以外はデフォルトとなるが、デフォルトは開発者のリポジトリであるので、権限がないため、失敗するだろう。
　ジットハブページを許可することを忘れずに。
　改題は、CTRL+ENTERである。





＃忘れないように開発の細部について。
　意外と堅牢で満足している。そして、落ち着きのあるスタイルは、とてもよい。これをどんどんコピーして、マニュアルの作成に当ててもよいほどである。

https://i.pinimg.com/564x/c2/6c/99/c26c9951f42aadc1b92e901b5efaa227.jpg




＃余白について。
　このテーマは、まずスペーシングの良さを売りにしている。スペーシングというのは、非常に重要で、安定感を示すものである。枠の丸めも含めて、スペーシングであろう。
　この「やがて王となる」テーマは、三つのスペーシングを扱っている。
　ひとつは「2rem」の通常スペース。これはタイトルボックスとテキストボックスの間の余白とさらに、この隣のイメージボックスの余白に使われている。
　この「2rem」をベースとしている。
　つぎには、それの半分の大きさである。これは文字のパディングに使われている。このテキストボックスの上下左右の余白は「1rem」である。
　最後は、大きめのスペース。このスペースは題名と題名の間や、ヘッダ、フッダに使われている。余白は「4rem」である。
　もし、さらにもう少し細かいものもあげるのであれば「0.25rem」もある。これは枠の丸めに使われているものである。
　枠の丸めは、一文字の四分の一としている。


https://i.pinimg.com/564x/33/b7/33/33b733dc49c9be5938268d917b797c48.jpg




＃検討課題について。
　やることは尽きない。
　しかし、全てやろうとすると、管理が必要であろう。とするなら、管理するべきである。
　番号を振ろうか。
　ひとつの修正点について、ひとつの改題として、しっかりと行う。
　課題の解決などは、表題に書いて、わかりやすくするべきだろう。

https://i.pinimg.com/564x/f1/cf/a5/f1cfa56d5c4d3cdb7c9745a6afe54792.jpg




＃済み。課題０１、スムーススクロール。
　一番下部のコンテンツリンクをクリックすると、一瞬で移動する。これは、少し忙しない。
　もっと美しく、対象の場所に移動するべきである。とすると、行うべきはスムーススクロールだ。
　幸い、ＩＤは割り振られているので、スムースにする以外の心配は不要である。
　これはもしかしたら、モダンなブラウザであれば、ＣＳＳだけでも可能かもしれないので、まずはプログラムを書かずに解決することを優先するとよいだろう。
　CSSで解決可能。
---
html {
    scroll-behavior: smooth;
}
---
　HTMLの要素に対して行うようである。とすると「yagateou.css」の修正で対応できる。
　下部のリンクを押すとスムーススクロールする。

https://i.pinimg.com/564x/2d/20/f5/2d20f57a8815b14e959e309f2487fe30.jpg



＃済み。課題０２、ローディグも動かして。
　セーブする際には、上部の赤いバーが動いて、セーブしていることを示してくれる。
　しかし、ローディングの際には、これがない。
　ローディングにおいても、この「動くバー」はあったほうが良いと思われる。
　ので、それを修正する。
追記：ソースを見たところ、ロードした跡に、バークラスを読み込んでいるので、逆にしてから行う必要がある。
---
bar.go(50)
await this.load()
bar.go(100)
---
で良いと思われる。
　済み。だがもう少しうまくデキそうな気がする。


https://i.pinimg.com/564x/8b/e8/a7/8be8a7d0fa93903ac921137f459d172a.jpg




＃課題０３、画像の読み込み。
　新しい画像のローディングがややもっさりとしている。それは、当然、読み込まれていないからであるが、初期画像はあるので、読み込まれてから、差し替えても問題ないはずである。
　現状では、突然差し替えて、読み込みが発生し、画像がちらつく。
　というのを避けるのは、悪くない。
　ガタッとするのを無くす。
　まずは、内部的に、ボディにつけないイメージ要素にURLを差し込んで、ロディングが完了したのちに、差し替えたほうが良い気がする。



＃済み。課題０４、画像をホバーしたら色鮮やかに。
　とても小さいが、画像をホバーしたら、グレースケールを解除してもよい。
　それは遊びとなる。
　そのために、トランジッションの設定も必要である。よく見たい、という動機からであれば、１秒ぐらいかけて、ゆっくりと彩度をあげるようにする。
　修正の方針。
　まず対象の画像要素にトランジッションを設定する。
---
.frame img.shield{
     transition: all 1s;
}
---
　つぎに画像要素の疑似要素ホバーにフィルター案セットをかける。
　するとグレイスケールが解除される、１秒かけて。
---
.frame img.shield:hover {
    filter: unset;
}
---
　済み。画像にカーソルを当てると色鮮やかになる。

https://i.pinimg.com/564x/c4/38/de/c438de163c34e534c2bb11ab9c076626.jpg




＃＊済み。課題０５、保存していない場合、遷移防止。
　データの保存は最重要である。保存するためのバーはとても有効であるが、どうしてもミスは避けられない。
　とすると、画面を閉じようとした場合に、警告を発するべきである。
　それを実装する。
　ドムのイベントでたしかあったはずだ。
---
window.onbeforeunload = function(e) {
      e.returnValue = "ページを離れようとしています。よろしいですか？";
    }
---
　でいける。ただし、全てページを離れる場合に警告を出すのではなく、保存が必要場合に出すのが必要である。保存したのであれば、出す必要はない。
　これをチェックするのは、上部のバーである。
　とすると、サイトクラスが、バーのコントロールを行っているので、そこに加えるのが良いと思われる。
---
needSave(){
return !!parseInt( document.querySelector('.Bar').style.width )
}
---
　バーの幅が〇でなければ、保存が必要なので、それでチェックできる。ニードセーブなら、警告を表示する。
　トランスでもいける。バーがあるときには、トランスクラスがある。
　というよりは、実はこれは、バークラスが、ゲットナンバーなりを実装すればいいので、バーを修正することにする。
---
getValue=()=>{
   return parseInt(this.bar.style.width)
}
---
　のほうがよい。これによって、使う方は、ゲットバリューが〇以外であれば、セーブが必要である。
---
window.onbeforeunload = function(e) {
  if(this.bar.getValue() === 0){
    return
  }
      e.returnValue = "行った変更が保存されません。よろしいですか？";
 }
---
　デキてない。再度確認。一度これは済みとして、再度課題としてあげる。

https://i.pinimg.com/236x/0f/3b/ff/0f3bff089149ca3b9fc128c3a8c8d739.jpg




＃済み。課題０８、遷移防止。
　直っていないの再度。
　まずは、ビフォアアンロードを確認するところから。
　画像遷移の防止は、まず、バークラスの方で、値を設定することは完了した。
　その後、バークラスに、トランジションエンドが発生しない問題が発覚し、それに関しては、ミリセックの時間差を与えることで解決した。
　幾つかの問題が交雑していたようである。
　さて。
　遷移防止が直らない件は、thisの取扱いに問題が有ることが発覚。
---
el.onclick = function(e){ ... }
---
　と
---
el.onclick = (e)=>{ ... }
---
　ではthisの取扱が違う。
　自動解決する後者にして修正。
　現在のステータスは、確認中。
　追記：修正済み。ようやく解決。

https://i.pinimg.com/564x/48/3a/5f/483a5f5552e4239d103ccd140dac8db2.jpg

＃課題０６、ペースト操作でもいろいろ反応させる。
　ペーストしたときに、いろいろと既存の機能が動かない。たとえば、画像の変更、さらにまた一覧のほうも変更されない。
　エンターをトリガーにしているので仕方がないことかもしれないが。
　また、プレスの動作がキーダウンであるので、キーアップした時と若干違う点も注意。
　キーダウンした場合に文字が既に打たれているのかは、確認したほうが良い。





＃課題０７、トリガーの確認。
　単純に確認だけであるが、様々なものが、主にキーインプットによって、変わる。
　その場合に、余分に処理をしないのはいいが、処理できていないものも見受けられる。
　そこで、一度整理したほうがいいだろう。


